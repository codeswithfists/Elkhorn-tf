name: Infra CI/CD
description: |
  This workflow is triggered on pull requests to the main branch and runs Terraform plan and apply steps.
  It includes manual approval for the apply step and performs security scans using Checkov.

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write # needed to POST to Github Actions Token Service?
  issues: write
  pull-requests: write # needed to write plan changes to PR
  security-events: write # Needed to upload chekov scan results
  contents: read # needed to clone repo

jobs:
  plan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [development, production]

    # environment: ${{ matrix.environment }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: |
          az account show

      # Add the GitHub runner IP to the storage account firewall rules to allow access to the Terraform state file.
      # This is necessary because the storage account is private and only allows access from specific IPs.
      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
            sleep 30

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"

      # Run a Terraform fmt
      - name: Terraform format
        id: fmt
        run: |
          cd ${{ matrix.environment }}
          terraform fmt -check -recursive
  
      # Run a Terraform validate
      - name: Terraform Validate
        id: validate
        if: success() || failure()
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform validate -no-color
      
      # Perform a security scan of the terraform code using checkov
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ matrix.environment }}/
          output_file_path: results/${{ matrix.environment }}.sarif
          framework: terraform
          skip_check: LOW,CKV2_AZURE_33,CKV2_AZURE_1
      
      # Upload results to GitHub Advanced Security
      - name: Upload SARIF file
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results
          category: checkov

      # Run a Terraform plan
      - name: Terraform plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform plan -no-color -out=${{ matrix.environment }}.tfplan

      # Remove the GitHub runner IP from the storage account firewall rules to prevent unauthorized access.
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove  \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP

      # Create/update a pull request comment with the Terraform plan output
      - name: Post PR comment
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ github.token }}
          working-directory: ${{ matrix.environment }}
          header: 'Terraform Plan: ${{ matrix.environment }}'
          planfile: ${{ matrix.environment }}.tfplan

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}.tfplan
          path: ${{ matrix.environment }}.tfplan
          retention-days: 3

  approval:
    runs-on: ubuntu-latest
    needs: plan
    environment: production # this is configured in GitHub Environments to requre manual approval
    steps:
      - name: Wait for Manual Approval
        run: echo "Approve this step in GitHub Environments before proceeding."

  # approval:
  #   runs-on: ubuntu-latest
  #   needs: plan

  #   permissions:
  #     issues: write

  #   steps:
  #     - name: Await Manual Approval
  #       uses: trstringer/manual-approval@v1
  #       timeout-minutes: 60
  #       with:
  #         secret: ${{ github.TOKEN }}
  #         approvers: codeswithfists
  #         minimum-approvals: 1
  #         issue-title: "Manual Approval Required for Terraform Apply"
  #         issue-body: "Please review the planned changes and approve or deny the deployment."

  apply:
    runs-on: ubuntu-latest
    needs: approval

    strategy:
      matrix:
        environment: [development, production]

    environment: ${{ matrix.environment }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: |
          az account show

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"

      # Download Terraform plan artifact from the previous job
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.environment }}.tfplan

      # Run a Terraform apply
      - name: Terraform Apply
        id: apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform apply -no-color ${{ matrix.environment }}.tfplan
